[General]
# 07号
# 实验设置
# GCL自适应	无
# GCL周期	400us
# 初始GCL	CT：100us,BE:300us
# 初始BE带宽	400Mbps
# 初始TT带宽	160Mbps
# 是否有TT流新增	有
# 每流量GCL调节步长	/
# 每周期GCL调节步长	/
# 触发调节的上下限	/
# TT调度方案	有等待
network = GCLadaptive

record-eventlog = false 
debug-on-errors = true
result-dir = results
sim-time-limit = 120ms

# debug
**.displayAddresses = true
**.verbose = true

# MAC Addresses
**.robotController1.eth.address = "00-00-00-00-00-01"
**.workstation1.eth.address = "00-00-00-00-00-02"
**.workstation2.eth.address = "00-00-00-00-00-03"
**.roboticArm.eth.address = "00-00-00-00-00-04"
**.robotController2.eth.address = "00-00-00-00-00-05"
**.robotController3.eth.address = "00-00-00-00-00-06"
**.robotController4.eth.address = "00-00-00-00-00-07"
**.robotController5.eth.address = "00-00-00-00-00-08"
**.robotController6.eth.address = "00-00-00-00-00-09"
**.robotController7.eth.address = "00-00-00-00-00-10"
**.robotController8.eth.address = "00-00-00-00-00-11"
**.robotController9.eth.address = "00-00-00-00-00-12"
**.robotController10.eth.address = "00-00-00-00-00-13"

# Switches
**.switch*.processingDelay.delay = 5us
**.filteringDatabase.database = xmldoc("xml/Routing.xml", "/filteringDatabases/")

**.switchA.eth[3].queue.gateController.initialSchedule = xmldoc("xml/GCL.xml", "/schedules/switch[@name='switchA']/port[@id='3']/schedule")
**.switch*.eth[*].queue.gateController.enableHoldAndRelease = false
**.switch*.eth[*].queue.numberOfQueues = 8
**.switch*.eth[*].queue.tsAlgorithms[0].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[1].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[2].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[3].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[4].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[5].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[6].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[7].typename = "StrictPriority"
**.switch*.eth[*].queue.queues[0].expressQueue = false
**.switch*.eth[*].queue.queues[1].expressQueue = false
**.switch*.eth[*].queue.queues[2].expressQueue = false
**.switch*.eth[*].queue.queues[3].expressQueue = false
**.switch*.eth[*].queue.queues[4].expressQueue = false
**.switch*.eth[*].queue.queues[5].expressQueue = false
**.switch*.eth[*].queue.queues[6].expressQueue = false
**.switch*.eth[*].queue.queues[7].expressQueue = true
**.gateController.result_file_location = "results/gateController.txt"

**.queues[*].bufferCapacity = 363360b

**.switchA.eth[3].mac.enablePreemptingFrames = true

# Schedule/Routing Swap
#**.scheduleSwap.schedule = xmldoc("xml/TestScenarioScheduleSwap.xml")

# Robot Controller
**.robotController*.trafGenSchedApp.initialSchedule = xmldoc("xml/GCL.xml")
**.robotController6.trafGenSchedApp.startTime = 40ms
**.robotController7.trafGenSchedApp.startTime = 40ms
**.robotController8.trafGenSchedApp.startTime = 40ms
**.robotController9.trafGenSchedApp.startTime = 40ms
**.robotController10.trafGenSchedApp.startTime = 40ms
**.robotController6.trafGenSchedApp.stopTime = 80ms
**.robotController7.trafGenSchedApp.stopTime = 80ms
**.robotController8.trafGenSchedApp.stopTime = 80ms
**.robotController9.trafGenSchedApp.stopTime = 80ms
**.robotController10.trafGenSchedApp.stopTime = 80ms

# Workstations
**.workstation*.trafGenApp.destAddress = "00-00-00-00-00-04"
**.workstation*.trafGenApp.packetLength = 1500Byte-4Byte # MTU-Size - VLAN-Tag-Size
**.workstation*.trafGenApp.sendInterval = 60us
**.workstation*.trafGenApp.vlanTagEnabled = true
**.workstation1.trafGenApp.pcp = 6
**.workstation2.trafGenApp.pcp = 5

# Robotic Arms
**.roboticArm.trafGenApp.numPacketsPerBurst = 0
**.roboticArm.trafGenApp.sendInterval = 1ms
**.roboticArm.trafGenApp.packetLength = 100B
**.roboticArm.trafGenApp.result_file_location = "results/roboticArm.txt"
# 延迟记录
**.roboticArm.eth.qEncap.hasTrafficRecorder = true
**.roboticArm.eth.qEncap.result_file_location = "results/delayAnalysis.txt"
